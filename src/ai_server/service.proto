syntax = "proto3";

package orama_ai_service;

service CalculateEmbeddingsService {
    rpc GetEmbedding (EmbeddingRequest) returns (EmbeddingResponse);
}

service LLMService {
    rpc CallLLM (LLMRequest) returns (LLMResponse);
    rpc CallLLMStream (LLMRequest) returns (stream LLMStreamResponse);
}

service VisionService {
    rpc CallVision (VisionRequest) returns (VisionResponse);
}

enum OramaModel {
    BGESmall = 0;
    BGEBase = 1;
    BGELarge = 2;
    MultilingualE5Small = 3;
    MultilingualE5Base = 4;
    MultilingualE5Large = 5;
}

enum OramaIntent {
    query = 0;
    passage = 1;
}

enum LLMType {
    content_expansion = 0;
    google_query_translator = 1;
    vision = 2;
}

// Request message for embedding generation
message EmbeddingRequest {
    OramaModel model = 1;         // The model to use for embedding
    repeated string input = 2;    // Array of input strings
    OramaIntent intent = 3;       // Optional intent description
}

// Response message for embedding generation
message EmbeddingResponse {
    repeated Embedding embeddings_result = 1; // Array of embeddings
    int32 dimensions = 2;                     // Dimensions of each embedding vector
}

// A single embedding representation
message Embedding {
    repeated float embeddings = 1; // Array of float values
}

// Request message for LLM calls
message LLMRequest {
    LLMType model = 1;           // Which LLM to use
    string prompt = 2;           // Input prompt
}

// Response message for LLM calls
message LLMResponse {
    string text = 1;             // Generated text response
}

// Response message for streaming LLM calls
message LLMStreamResponse {
    string text_chunk = 1;       // Chunk of generated text
    bool is_final = 2;           // Indicates if this is the final chunk
}

// Request message for vision model
message VisionRequest {
    bytes image = 1;             // Image data
    string text = 2;             // Accompanying text/prompt
}

// Response message for vision model
message VisionResponse {
    string text = 1;             // Generated text response
}